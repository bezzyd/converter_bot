import logging
import os
import asyncio
from aiohttp import ClientSession

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types

load_dotenv()

API_TOKEN = os.environ.get("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def choose_currency(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True, row_width=2
        )
    eur_button = types.InlineKeyboardButton(text="EUR")
    usd_button = types.InlineKeyboardButton(text="USD")
    cny_button = types.InlineKeyboardButton(text="CNY")
    try_button = types.InlineKeyboardButton(text="TRY")
    byn_button = types.InlineKeyboardButton(text="BYN")
    kzt_button = types.InlineKeyboardButton(text="KZT")
    markup.add(
        eur_button, usd_button, cny_button,
        try_button, byn_button, kzt_button
        )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n" +
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§.\n" +
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –Ω—É–∂–Ω–æ–π —Ç–µ–±–µ –≤–∞–ª—é—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –µ—ë üòé",
        reply_markup=markup)


@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    await message.answer(
        f"{message.from_user.first_name}, " +
        "–ø–æ–º–æ—â—å –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ üò•"
        )


# data = requests.get("https://www.cbr-xml-daily.ru/daily_json.js").json()


async def get_data():
    async with ClientSession() as session:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"

        async with session.get(url) as response:
            return await response.json()


@dp.message_handler(content_types="text")
async def eur_rate(message: types.Message):
    if message.text == "EUR":
        await message.answer(
            "–ö—É—Ä—Å –µ–≤—Ä–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " +
            f"{await get_data()['Valute']['EUR']['Value']} üôÑ"
            )


@dp.message_handler(content_types="text")
async def usd_rate(message: types.Message):
    if message.text == "USD":
        await message.answer(
            "–ö—É—Ä—Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " +
            f"{data['Valute']['USD']['Value']} üôÑ"
            )


@dp.message_handler(content_types="text")
async def cny_rate(message: types.Message):
    if message.text == "CNY":
        await message.answer(
            "–ö—É—Ä—Å –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —é–∞–Ω—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " +
            f"{data['Valute']['CNY']['Value']} üôÑ"
            )


@dp.message_handler(content_types="text")
async def try_rate(message: types.Message):
    if message.text == "TRY":
        await message.answer(
            "–ö—É—Ä—Å —Ç—É—Ä–µ—Ü–∫–æ–π –ª–∏—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " +
            f"{data['Valute']['TRY']['Value']} üôÑ"
            )


@dp.message_handler(content_types="text")
async def byn_rate(message: types.Message):
    if message.text == "BYN":
        await message.answer(
            "–ö—É—Ä—Å –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " +
            f"{data['Valute']['BYN']['Value']} üôÑ"
            )


@dp.message_handler(content_types="text")
async def kzt_rate(message: types.Message):
    if message.text == "KZT":
        await message.answer(
            "–ö—É—Ä—Å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —Ç–µ–Ω–≥–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " +
            f"{data['Valute']['KZT']['Value']} üôÑ"
            )


@dp.message_handler()
async def no_way(message: types.Message):
    await message.answer("–î—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –Ω–µ –∑–∞–≤–µ–∑–ª–∏. –ò –∫—Ç–æ –≤ —ç—Ç–æ–º –≤–∏–Ω–æ–≤–∞—Ç? ü§™")

if __name__ == '__main__':
    asyncio.run(get_data())
    executor.start_polling(dp, skip_updates=True)
